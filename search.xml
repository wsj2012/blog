<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>App启动速度篇</title>
      <link href="/blog/article/App%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E7%AF%87/"/>
      <url>/blog/article/App%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="1、App启动都做了哪些事儿？"><a href="#1、App启动都做了哪些事儿？" class="headerlink" title="1、App启动都做了哪些事儿？"></a>1、App启动都做了哪些事儿？</h3><ul><li>冷启动(启动前App进程不在系统里，需要系统新创建一个进程分配给它，这是一个完成的启动过程)</li><li>热启动(App进程在系统中，用户重新启动进入App的过程)</li></ul><blockquote><p>用户感知到启动慢，其实都发生在主线程上，而主线程慢的原因很多，如在主线程上执行了大文件的读写操作、在渲染周期中执行了大量计算等。。。</p></blockquote><h3 id="2、启动阶段"><a href="#2、启动阶段" class="headerlink" title="2、启动阶段"></a>2、启动阶段</h3><ul><li><p>main()函数执行前；</p><p>优化：</p><p>1️⃣、减少动态库加载；</p><p>2️⃣、减少加载启动后不会去使用的类或者方法；</p><p>3️⃣、+loadn()方法里的内容可以放到首屏渲染完成后再执行，或者使用+initialize()方法替换掉</p><p>注：在一个+load()方法里，进行运行时替换操作带来4ms的消耗，文件越多，对启动速度的影响就越大。</p></li><li><p>main()函数执行后；</p></li></ul><ul><li>首屏渲染完成后。</li></ul><h3 id="3、启动优化"><a href="#3、启动优化" class="headerlink" title="3、启动优化"></a>3、启动优化</h3><ul><li><p>功能级别的启动优化（main()函数执行后阶段）</p><p>思路：main()函数执行后到首屏渲染完成只处理首屏相关的业务，其他非首屏业务的初始化、监听、配置文件读取等都放到首屏渲染完成后去做。</p></li><li><p>方法级别的启动优化</p><p>思路：检查首屏渲染完成前有哪些耗时的方法、将没必要的耗时方法滞后或异步执行(重点检查执行实现加载、编辑、存储图片和文件等资源的方法)</p></li></ul><h3 id="4、监控手段"><a href="#4、监控手段" class="headerlink" title="4、监控手段"></a>4、监控手段</h3><ul><li><p>定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时(Time  Profiler)</p></li><li><p>对obj_msgSend方法进行hook来掌握所有方法的耗时。(fishhook)</p><p>注：FaceBook开源库<a href="https://github.com/facebook/fishhook" target="_blank" rel="noopener">fishhook</a>，可在iOS上运行的Mach-O二进制文件中动态地重新绑定符号。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 启动 </tag>
            
            <tag> 速度 </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 纯iOS风格UI框架搭建</title>
      <link href="/blog/article/Flutter%20iOS%E9%A3%8E%E6%A0%BCUI%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/blog/article/Flutter%20iOS%E9%A3%8E%E6%A0%BCUI%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>新入门Flutter技术栈，从iOS转入，故实现一套全iOS风格的Flutter页面搭建。其中通过查询官方资料(现在生态不够健全，资料很难寻找)，花了点功夫最终得以实现。有实现更好的方式还望不吝赐教，有使用不对的地方还请指正。</p><h4 id="Fetures"><a href="#Fetures" class="headerlink" title="Fetures:"></a>Fetures:</h4><ul><li>全使用iOS风格widget（CupertinoTabBar搭配CupertinoTabScaffold）</li><li>tabBar上菜单可自由设置显示风格（包括图标、字体大小颜色）</li></ul><h4 id="Attention"><a href="#Attention" class="headerlink" title="Attention:"></a>Attention:</h4><ul><li>此入口类CupertinoTabScaffold内未设置navigationBar， navigationBar最好都在各自page页内设置，这样可自定制navigationBar上显示的不同元素。（如果在此入口类设置了navigationBar，各tab首页page的navigationBar上显示元素就会一致，个性化定制各page的navigationBar就需要加入更多的逻辑，建议navigationBar分散到各自的page页去实现）</li></ul><p>main.dart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/cupertino.dart&apos;;</span><br><span class="line">import &apos;package:myapp/src/EngwordsPage.dart&apos;;</span><br><span class="line">import &apos;package:myapp/src/SamplePage.dart&apos;;</span><br><span class="line">import &apos;package:myapp/src/FirstPage.dart&apos;;</span><br><span class="line">import &apos;package:myapp/src/ListPage.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(new MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _MyMainState createState() =&gt; new _MyMainState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MyMainState extends State&lt;MyApp&gt; &#123;</span><br><span class="line">  // 默认索引第一个tab</span><br><span class="line">  int _tabIndex = 0;</span><br><span class="line"></span><br><span class="line">  // 正常情况的字体样式</span><br><span class="line">  final tabTextStyleNormal = new TextStyle(color: const Color(0xff969696));</span><br><span class="line"></span><br><span class="line">  // 选中情况的字体样式</span><br><span class="line">  final tabTextStyleSelect = new TextStyle(color: const Color(0xff63ca6c));</span><br><span class="line"></span><br><span class="line">  // 底部菜单栏图标数组</span><br><span class="line">  var tabImages;</span><br><span class="line"></span><br><span class="line">  // 页面内容</span><br><span class="line">  var _pages;</span><br><span class="line"></span><br><span class="line">  // 菜单文案</span><br><span class="line">  var tabTitles = [&apos;推荐&apos;, &apos;资讯&apos;, &apos;发现&apos;, &apos;我的&apos;];</span><br><span class="line"></span><br><span class="line">  // 路由map</span><br><span class="line">  Map&lt;String, WidgetBuilder&gt; _routes = new Map();</span><br><span class="line"></span><br><span class="line">  // 生成image组件</span><br><span class="line">  Image getTabImage(path) &#123;</span><br><span class="line">    return new Image.asset(path, width: 20.0, height: 20.0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void initData() &#123;</span><br><span class="line">    if (tabImages == null) &#123;</span><br><span class="line">      tabImages = [</span><br><span class="line">        [</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_news_normal.png&apos;),</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_news_actived.png&apos;)</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_tweet_normal.png&apos;),</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_tweet_actived.png&apos;)</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_discover_normal.png&apos;),</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_discover_actived.png&apos;)</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_my_normal.png&apos;),</span><br><span class="line">          getTabImage(&apos;assets/images/ic_nav_my_pressed.png&apos;)</span><br><span class="line">        ]</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _pages = [</span><br><span class="line">      new EngwordsPage(),</span><br><span class="line">      new SamplePage(),</span><br><span class="line">      new ListWidget(&quot;发现&quot;),</span><br><span class="line">      new FirstPage()</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">  //获取菜单栏字体样式</span><br><span class="line">  TextStyle getTabTextStyle(int curIndex) &#123;</span><br><span class="line">    if (curIndex == _tabIndex) &#123;</span><br><span class="line">      return tabTextStyleSelect;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return tabTextStyleNormal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取图标</span><br><span class="line">  Image getTabIcon(int curIndex) &#123;</span><br><span class="line">    if (curIndex == _tabIndex) &#123;</span><br><span class="line">      return tabImages[curIndex][1];</span><br><span class="line">    &#125;</span><br><span class="line">    return tabImages[curIndex][0];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取标题文本</span><br><span class="line">  Text getTabTitle(int curIndex) &#123;</span><br><span class="line">    return new Text(</span><br><span class="line">      tabTitles[curIndex],</span><br><span class="line">      style: getTabTextStyle(curIndex),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取BottomNavigationBarItem</span><br><span class="line">  List&lt;BottomNavigationBarItem&gt; getBottomNavigationBarItem() &#123;</span><br><span class="line">    List&lt;BottomNavigationBarItem&gt; list = new List();</span><br><span class="line">    for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">      list.add(new BottomNavigationBarItem(</span><br><span class="line">          icon: getTabIcon(i), title: getTabTitle(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    initData();</span><br><span class="line">    return new CupertinoApp(</span><br><span class="line">      title: &quot;Demo&quot;,</span><br><span class="line">      theme: new CupertinoThemeData(</span><br><span class="line">        primaryColor: CupertinoColors.darkBackgroundGray,</span><br><span class="line">      ),</span><br><span class="line">      routes: _routes,</span><br><span class="line">      home: new CupertinoTabScaffold(</span><br><span class="line">        tabBar: CupertinoTabBar(</span><br><span class="line">          items: getBottomNavigationBarItem(),</span><br><span class="line">          currentIndex: _tabIndex,</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _tabIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        tabBuilder: (BuildContext context, int index) &#123;</span><br><span class="line">          return CupertinoTabView(</span><br><span class="line">            builder: (BuildContext context) &#123;</span><br><span class="line">              return CupertinoPageScaffold(</span><br><span class="line">                child: _pages[index],</span><br><span class="line">                // navigationBar: CupertinoNavigationBar(</span><br><span class="line">                //   middle: Text(tabTitles[index]),</span><br><span class="line">                //   trailing: _trailingButtons[index],</span><br><span class="line">                // ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FirstPage.dart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/cupertino.dart&apos;;</span><br><span class="line"></span><br><span class="line">class FirstPage extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  FirstPageState createState() =&gt; new FirstPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FirstPageState extends State&lt;FirstPage&gt; &#123;</span><br><span class="line">  final rt = new CupertinoButton(</span><br><span class="line">      child: new Image.asset(&quot;assets/images/nav_close.png&quot;),</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        print(&quot;right clicked&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  </span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new CupertinoPageScaffold(</span><br><span class="line">      navigationBar: CupertinoNavigationBar(</span><br><span class="line">        middle: Text(&quot;First&quot;),</span><br><span class="line">        trailing: rt,</span><br><span class="line">        border: Border.all(width: 0, color: CupertinoColors.darkBackgroundGray),</span><br><span class="line">      ),</span><br><span class="line">      child: new Container(</span><br><span class="line">        child: new Center(</span><br><span class="line">          child: new Text(</span><br><span class="line">            &quot;这是第一个界面&quot;,</span><br><span class="line">            style: new TextStyle(</span><br><span class="line">              color: CupertinoColors.darkBackgroundGray,</span><br><span class="line">              fontSize: 18,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他类（EngwordsPage.dart、SamplePage.dart）都是如此的UI结构。</p><h4 id="Effects："><a href="#Effects：" class="headerlink" title="Effects："></a>Effects：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3603263-07b507b7ba38a3b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="capture1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3603263-e5a145671d3c85e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="capture2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3603263-9411e767fcaf5ff2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="capture3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> UI </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/blog/article/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/article/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Mark一下日常工作当中常用到的git命令：</p><p>git stash 暂存文件<br>git pull 拉取代码<br>git stash pop 从暂存区拉取代码<br>git add *.m<br>git commit -m “messages”  提交代码<br>git pull —rebase<br>git push 推送代码到仓库</p><p>git diff xxx.m 比较修改前后<br>git branch 查看服务器分支名称<br>git checkout branchname 切换分支<br>git checkout xxx.m回滚一个文件<br>git checkout .回滚全部</p><p>git reset —hard 重置<br>git clean -rf<br>./fmanager pull -v</p><p>git branch -a 查看远程所有分支<br>git branch 查看当前分支<br>git branch master（本地分支名）  origin/master（远程分支）—-切换分支</p><p>//回退全部代码<br>git reset HEAD<br>git clean -f</p><p>//直接克隆分支仓库到本地<br>git clone -b yzt_live_20180921 <a href="http://git-ma.paic.com.cn/Toa/Fusion.git" target="_blank" rel="noopener">http://git-ma.paic.com.cn/Toa/Fusion.git</a></p><p>pod lib lint –sources=’<a href="https://git.oschina.net/ch_team/Specs.git,https://github.com/CocoaPods/Specs.git&#39;" target="_blank" rel="noopener">https://git.oschina.net/ch_team/Specs.git,https://github.com/CocoaPods/Specs.git&#39;</a> –verbose</p><p>Unable to find a pod with name, author, summary, or description matching<br>rm ~/Library/Caches/CocoaPods/search_index.json</p><p>pod spec lint XSSchoolCommon.podspec –sources=’<a href="https://git.oschina.net/ch_team/Specs.git,https://github.com/CocoaPods/Specs.git&#39;" target="_blank" rel="noopener">https://git.oschina.net/ch_team/Specs.git,https://github.com/CocoaPods/Specs.git&#39;</a> –allow-warnings<br>pod setup</p><p>pod lib lint –sources=’<a href="http://git-ma.paic.com.cn/ToaApp/YZT-iOS-Pod-Spec.git,http://git-ma.paic.com.cn/ToaApp/YZT-iOS-Pod-Master.git&#39;" target="_blank" rel="noopener">http://git-ma.paic.com.cn/ToaApp/YZT-iOS-Pod-Spec.git,http://git-ma.paic.com.cn/ToaApp/YZT-iOS-Pod-Master.git&#39;</a> –allow-warnings –verbose</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS组件化实现步骤总结</title>
      <link href="/blog/article/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/"/>
      <url>/blog/article/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>随着应用业务的增加，项目逐渐变得庞大，实施组件化方案就会显得尤为必要。网上的资料繁杂，介于有的表达不是特别清晰，这里记录个人实现iOS组件化的步骤，希望能帮助到你，解决在组件化过程中猜到的坑。</p><h3 id="1、创建私有Repo（Specs）"><a href="#1、创建私有Repo（Specs）" class="headerlink" title="1、创建私有Repo（Specs）"></a>1、创建私有Repo（Specs）</h3><ul><li>在Git上创建一个Respository，并命名为Specs；</li><li>添加Private Pod并验证<br>终端依次执行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 添加私有Repo</span><br><span class="line">pod repo add ch_team https://git.oschina.net/ch_team/Specs.git</span><br><span class="line">// 验证是否成功</span><br><span class="line">pod repo lint .</span><br></pre></td></tr></table></figure><h3 id="2、创建主工程"><a href="#2、创建主工程" class="headerlink" title="2、创建主工程"></a>2、创建主工程</h3><ul><li>在Git上创建一个Respository，并命名为PAToapAPP；</li><li><p>将Respository拉取下来并且通过XCodec创建工程，终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.oschina.net/ch_team/PAToapAPP.git</span><br></pre></td></tr></table></figure></li><li><p>终端切到PAToapAPP工程根目录下，初始化你的Podfile，此时不需要在Podfile添加任何依赖<br>终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure></li></ul><p>现在主工程已创建完毕。</p><h3 id="3、创建组件Pod（创建多个Pod，创建方式相同）"><a href="#3、创建组件Pod（创建多个Pod，创建方式相同）" class="headerlink" title="3、创建组件Pod（创建多个Pod，创建方式相同）"></a>3、创建组件Pod（创建多个Pod，创建方式相同）</h3><ul><li><p>在Git上创建Repository，并拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.oschina.net/ch_team/PAToapAPP-User.git</span><br></pre></td></tr></table></figure></li><li><p>在PAToapAPP-User工程目录下，创建Example工程</p></li><li>创建.podspec，并且创建Pod/Classes目录， 将Example的View、ViewModel、Model拷贝至Classes目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create PAToapAPP-User</span><br></pre></td></tr></table></figure></li></ul><p>文件目录变为：<br>Example(📂)<br>LICENSE<br>Pod(📃)<br>……Classes(📂)<br>…………Model(📂)<br>…………View(📂)<br>…………ViewModel(📂)<br>README.md<br>PAToapAPP-User.podspec</p><ul><li><p>修改.podspec文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.homepage      =  &quot;http://git.oschina.net/ch_team/PAToapAPP-User&quot;</span><br><span class="line">s.license       =  &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</span><br><span class="line">s.source_files  =  &quot;Pod/Classes&quot;, &quot;Pod/Classes/**/*.&#123;h,m&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>本地验证.podspec是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod lib lint</span><br></pre></td></tr></table></figure></li><li><p>提交到Github，并远程验证，按照下列步骤需要首先提交Git，然后添加Tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;添加Pod&quot;</span><br><span class="line">$ git push</span><br><span class="line">#添加Tag</span><br><span class="line">$ git tag 0.0.1 #这里需要与你的.podspec中s.version值相同</span><br><span class="line">$ git push --tags</span><br><span class="line">#验证</span><br><span class="line">$ pod spec lint</span><br><span class="line">-&gt; PAToapAPP-User(0.0.1)</span><br><span class="line">Analyzed 1 podspec</span><br><span class="line">PAToapAPP-User.podspec passed validation.</span><br></pre></td></tr></table></figure></li><li><p>添加Pod到你的私有的Repo中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo push ch_team PAToapAPP-User.podspec</span><br><span class="line">Validatiing spec</span><br><span class="line">-&gt;PAToapAPP-User(0.0.1)</span><br><span class="line">Updating the `ch_team` repo</span><br><span class="line">Already up-to-date.</span><br><span class="line">Adding the spec to the `ch_team` repo</span><br><span class="line">-[No change] PAToapAPP-User(0.0.1)</span><br><span class="line">Pushing the `ch_team` repo</span><br></pre></td></tr></table></figure></li><li><p>试试搜索你的Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pod search PAToapAPP-User</span><br><span class="line">-&gt;PAToapAPP-User(0.0.1)</span><br><span class="line">业务组件A</span><br><span class="line">pod &apos;PAToapAPP-User&apos;, &apos;~&gt; 0.0.1&apos;</span><br></pre></td></tr></table></figure></li><li><p>现在你可以使用了，请记住在你的Podfile中添加你Private Pod 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source &apos;https://github.com/CocoaPods/Specs&apos; </span><br><span class="line">source &apos;https://github.com/ch_team/Specs.git&apos; </span><br><span class="line">platform :ios, &quot;9.0&quot; </span><br><span class="line">target &quot;XXX&quot; do </span><br><span class="line">pod &apos;PAToapAPP-User&apos;, &apos;~&gt;0.0.1&apos; </span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul><p>当组件化项目完成以后，后续开发中主要的操作步骤如下：</p><ul><li>工程代码变更，进入podspec文件修改version版本号</li><li>git commit -am “修改说明”提交工程所有修改</li><li>pod repo push xxx  xxx.podspec提交验证spec文件</li><li>在根目录的.cocoapods目录下去查看工程是否有对应版本信息</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> 工程 </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasySegmentedControl定时显示样式使用说明</title>
      <link href="/blog/article/EasySegmentedControl%E5%AE%9A%E5%88%B6%E6%98%BE%E7%A4%BA%E6%A0%B7%E5%BC%8F%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/article/EasySegmentedControl%E5%AE%9A%E5%88%B6%E6%98%BE%E7%A4%BA%E6%A0%B7%E5%BC%8F%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wsj2012/EasySegmentedControl" target="_blank" rel="noopener">EasySegmentedControl</a>是<a href="https://github.com/HeshamMegid/HMSegmentedControl" target="_blank" rel="noopener">HMSegmentedControl</a>的swift版本，两个库的实现细节及实现方式是一致的，鉴于里面有很多属性参数的设置，第一次使用此库的人对有的参数使用不是很明白，各参数使用对定制样式实际作用不会很熟悉，故写此文，可以更好的帮助你使用此第三方库，灵活地定制出自己想要的样式。此文提供五种样式Demo，可在此五种样式上灵活调整参数，以定制出不同样式的分段控制器。</p><h4 id="接入方式可选择如下方式中的一种："><a href="#接入方式可选择如下方式中的一种：" class="headerlink" title="接入方式可选择如下方式中的一种："></a>接入方式可选择如下方式中的一种：</h4><ul><li>pod ‘EasySegmentedControl’  </li><li>将EasySegmentedControl.swift文件导入自己的工程</li></ul><h1 id="Demo①"><a href="#Demo①" class="headerlink" title="Demo①"></a>Demo①</h1><h4 id="Style1："><a href="#Style1：" class="headerlink" title="Style1："></a>Style1：</h4><ul><li>效果图</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3603263-5085471db33101c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenShot1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let viewWidth = view.frame.size.width</span><br><span class="line">      let sc = EasySegmentedControl.init(with: [&quot;Trending&quot;, &quot;News&quot;, &quot;Library&quot;])</span><br><span class="line">      sc.frame = CGRect(x: 0, y: 88, width: viewWidth, height: 40)</span><br><span class="line">      sc.autoresizingMask = [.flexibleRightMargin, .flexibleWidth]</span><br><span class="line">      sc.backgroundsColor = UIColor.clear</span><br><span class="line">      sc.addTarget(self, action: #selector(segmentedControlChangedValue(segmentedControl:)), for: .valueChanged)</span><br><span class="line">      view.addSubview(sc)</span><br></pre></td></tr></table></figure><h1 id="Demo②"><a href="#Demo②" class="headerlink" title="Demo②"></a>Demo②</h1><h4 id="Style2："><a href="#Style2：" class="headerlink" title="Style2："></a>Style2：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3603263-165d665c8cf9e44f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenShot2.png"></p><p>Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let sc1 = EasySegmentedControl.init(with: [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;, &quot;Six&quot;, &quot;Seven&quot;, &quot;Eight&quot;])</span><br><span class="line">      sc1.autoresizingMask = [.flexibleRightMargin, .flexibleWidth]</span><br><span class="line">      sc1.frame = CGRect(x: 0, y: 60 + 68, width: viewWidth, height: 40)</span><br><span class="line">      sc1.segmentEdgeInset = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)</span><br><span class="line">      sc1.selectionStyle = .FullWidthStripe</span><br><span class="line">      sc1.selectionIndicatorLocation = .Down</span><br><span class="line">      sc1.verticalDividerEnabled = true</span><br><span class="line">      sc1.verticalDividerColor = .black</span><br><span class="line">      sc1.verticalDividerWidth = 1.0</span><br><span class="line">      sc1.titleFormatter = &#123;(seg, title, index, selected) in</span><br><span class="line">          let attString = NSAttributedString.init(string: title, attributes: [NSAttributedString.Key.foregroundColor : UIColor.blue])</span><br><span class="line">          return attString</span><br><span class="line">      &#125;</span><br><span class="line">      sc1.addTarget(self, action: #selector(segmentedControlChangedValue(segmentedControl:)), for: .valueChanged)</span><br><span class="line">      view.addSubview(sc1)</span><br></pre></td></tr></table></figure><h1 id="Demo③"><a href="#Demo③" class="headerlink" title="Demo③"></a>Demo③</h1><h4 id="Style3："><a href="#Style3：" class="headerlink" title="Style3："></a>Style3：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3603263-116ae38162eb3de2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenShot3.png"></p><p>Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sc1.addTarget(self, action: #selector(segmentedControlChangedValue(segmentedControl:)), for: .valueChanged)</span><br><span class="line">view.addSubview(sc1)</span><br><span class="line"></span><br><span class="line">// Segmented control with images</span><br><span class="line">let images: [UIImage] = [UIImage(named: &quot;1&quot;)!, UIImage(named: &quot;2&quot;)!, UIImage(named: &quot;3&quot;)!, UIImage(named: &quot;4&quot;)!]</span><br><span class="line">let selectedImages: [UIImage] = [UIImage(named: &quot;1-selected&quot;)!, UIImage(named: &quot;2-selected&quot;)!, UIImage(named: &quot;3-selected&quot;)!, UIImage(named: &quot;4-selected&quot;)!]</span><br><span class="line">let titles: [String] = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br><span class="line">let sc2 = EasySegmentedControl.init(with: images, sectionSelectedImages: selectedImages, sectiontitles: titles)</span><br><span class="line">sc2.imagePosition = .LeftOfText</span><br><span class="line">sc2.frame = CGRect(x: 0, y: 120 + 68, width: viewWidth, height: 50)</span><br><span class="line">sc2.selectionIndicatorHeight = 4.0</span><br><span class="line">sc2.backgroundsColor = UIColor.clear</span><br><span class="line">sc2.selectionIndicatorLocation = .Down</span><br><span class="line">sc2.selectionStyle = .TextWidthStripe</span><br><span class="line">sc2.segmentWidthStyle = .Dynamic</span><br><span class="line">sc2.addTarget(self, action: #selector(segmentedControlChangedValue(segmentedControl:)), for: .valueChanged)</span><br><span class="line">view.addSubview(sc2)</span><br></pre></td></tr></table></figure><h1 id="Demo④"><a href="#Demo④" class="headerlink" title="Demo④"></a>Demo④</h1><h4 id="Style4："><a href="#Style4：" class="headerlink" title="Style4："></a>Style4：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3603263-f39cc2d901a72d8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenShot4.png"></p><p>Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let sc3 = EasySegmentedControl.init(with: [&quot;one&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;4&quot;, &quot;Five&quot;])</span><br><span class="line">      sc3.frame = CGRect(x: 0, y: 180 + 68, width: viewWidth, height: 50)</span><br><span class="line">      sc3.indexChangeBlock = &#123; index in</span><br><span class="line">          print(&quot;Selected index \(index) (via block)&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">      sc3.selectionIndicatorHeight = 4.0</span><br><span class="line">      sc3.backgroundsColor = UIColor(red: 0.1, green: 0.4, blue: 0.8, alpha: 1)</span><br><span class="line">      sc3.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]</span><br><span class="line">      sc3.selectionIndicatorColor = UIColor(red: 0.5, green: 0.8, blue: 1, alpha: 1)</span><br><span class="line">      sc3.selectionIndicatorBoxColor = UIColor.black</span><br><span class="line">      sc3.selectionIndicatorBoxOpacity = 1.0</span><br><span class="line">      sc3.selectionStyle = .Box</span><br><span class="line">      sc3.selectedSegmentIndex = NoSegment</span><br><span class="line">      sc3.selectionIndicatorLocation = .Down</span><br><span class="line">      sc3.shouldAnimateUserSelection = false</span><br><span class="line">      sc3.tag = 2</span><br><span class="line">      view.addSubview(sc3)</span><br></pre></td></tr></table></figure><h1 id="Demo⑤"><a href="#Demo⑤" class="headerlink" title="Demo⑤"></a>Demo⑤</h1><h4 id="Style5："><a href="#Style5：" class="headerlink" title="Style5："></a>Style5：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3603263-0b07727b687ec1ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenShot5.png"></p><p>Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lazy var scrollView: UIScrollView = &#123;</span><br><span class="line">    let s = UIScrollView.init(frame: CGRect(x: 0, y: 310 + 68, width: view.frame.size.width, height: 210))</span><br><span class="line">    s.backgroundColor = UIColor(red: 0.7, green: 0.7, blue: 0.7, alpha: 1)</span><br><span class="line">    s.isPagingEnabled = true</span><br><span class="line">    s.showsHorizontalScrollIndicator = false</span><br><span class="line">    s.contentSize = CGSize(width: view.frame.size.width * 3, height: 200)</span><br><span class="line">    s.delegate = self</span><br><span class="line">    s.scrollRectToVisible(CGRect(x: view.frame.size.width, y: 0, width: view.frame.size.width, height: 200), animated: false)</span><br><span class="line">    return s</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">   let sc4 = EasySegmentedControl.init(frame: CGRect(x: 0, y: 260 + 68, width: view.frame.size.width, height: 50))</span><br><span class="line">    sc4.sectionTitles = [&quot;Worldwide&quot;, &quot;Local&quot;, &quot;Headlines&quot;]</span><br><span class="line">    sc4.selectedSegmentIndex = 1</span><br><span class="line">    sc4.backgroundColor = UIColor(red: 0.7, green: 0.7, blue: 0.7, alpha: 1)</span><br><span class="line">    sc4.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]</span><br><span class="line">    sc4.selectedTitleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor(red: 0.1, green: 0.1, blue: 0.1, alpha: 1)]</span><br><span class="line">    sc4.selectionIndicatorColor = UIColor(red: 0.3, green: 0.3, blue: 0.3, alpha: 1)</span><br><span class="line">    sc4.selectionStyle = .Box;</span><br><span class="line">    sc4.selectionIndicatorLocation = .Up;</span><br><span class="line">    sc4.tag = 3;</span><br><span class="line">    sc4.indexChangeBlock = &#123;[weak self] index in</span><br><span class="line">        if let strongSelf = self &#123;</span><br><span class="line">            strongSelf.scrollView.scrollRectToVisible(CGRect(x: viewWidth * CGFloat(index), y: 0, width: viewWidth, height: 200), animated: true)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    view.addSubview(sc4)</span><br><span class="line"></span><br><span class="line">   let lable1 = UILabel.init(frame: CGRect(x: 0, y: 0, width: viewWidth, height: 210))</span><br><span class="line">    setApperanceFor(label: lable1)</span><br><span class="line">    lable1.text = &quot;Worldwide&quot;</span><br><span class="line">    scrollView.addSubview(lable1)</span><br><span class="line">    </span><br><span class="line">    let lable2 = UILabel.init(frame: CGRect(x: viewWidth, y: 0, width: viewWidth, height: 210))</span><br><span class="line">    setApperanceFor(label: lable2)</span><br><span class="line">    lable2.text = &quot;Local&quot;</span><br><span class="line">    scrollView.addSubview(lable2)</span><br><span class="line">    </span><br><span class="line">    let lable3 = UILabel.init(frame: CGRect(x: viewWidth * 2, y: 0, width: viewWidth, height: 210))</span><br><span class="line">    setApperanceFor(label: lable3)</span><br><span class="line">    lable3.text = &quot;Headlines&quot;</span><br><span class="line">    scrollView.addSubview(lable3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) &#123;</span><br><span class="line">    let pageWidth = scrollView.frame.size.width</span><br><span class="line">    let page = Int(scrollView.contentOffset.x / pageWidth)</span><br><span class="line">    sc4.setSelectedSegment(index: page, animated: true)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可根据自己的需要，调整参数达到UI设计的样式规范。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> Swift </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数在绘制圆中的使用</title>
      <link href="/blog/article/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%9C%A8%E7%BB%98%E5%88%B6%E5%9C%86%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/article/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%9C%A8%E7%BB%98%E5%88%B6%E5%9C%86%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在绘制饼图百分比图例标识类的图形中，我们就需要用到三角函数相关的知识点来计算各个点的位置，这里实现了一个简单的饼图百分比图例标识的example，通过此例可举一反三结合实际项目中的需求，实现其所需要的效果。希望你能通过此例能有所收获。此例子为Objective-C版本。</p><p>直接上代码：<br>新建一个继承自UIView的对象：</p><p>.h文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//  </span><br><span class="line">//  PieView.h  </span><br><span class="line">//  BlurDemo  </span><br><span class="line">//  </span><br><span class="line">//  Created by sj_w on 15/9/11.  </span><br><span class="line">//  Copyright (c) 2015年 sj_w. All rights reserved.  </span><br><span class="line">//  </span><br><span class="line">  </span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;  </span><br><span class="line">  </span><br><span class="line">@interface PieView : UIView  </span><br><span class="line">  </span><br><span class="line">@property (nonatomic, strong) NSArray   *percentArr;//百分比分段  </span><br><span class="line">@property (nonatomic, strong) NSMutableArray    *angleArr;//对应的弧度  </span><br><span class="line">@property (nonatomic, strong) NSMutableArray    *midAngleArr;//每个弧度分段的中心点位置  </span><br><span class="line">  </span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>.m文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">//  </span><br><span class="line">//  PieView.m  </span><br><span class="line">//  BlurDemo  </span><br><span class="line">//  </span><br><span class="line">//  Created by sj_w on 15/9/11.  </span><br><span class="line">//  Copyright (c) 2015年 sj_w. All rights reserved.  </span><br><span class="line">//  </span><br><span class="line">  </span><br><span class="line">#import &quot;PieView.h&quot;  </span><br><span class="line">#define kScreenWidth [UIScreen mainScreen].bounds.size.width  </span><br><span class="line">#define OUTR ((kScreenWidth)/4)  </span><br><span class="line">#define INR  ((kScreenWidth/4)-26)  </span><br><span class="line">#define PIECENTERX kScreenWidth/2  </span><br><span class="line">#define PIECENTERY 150  </span><br><span class="line">#define PIECENTER CGPointMake(kScreenWidth/2, frame.size.height/2)  </span><br><span class="line">#define LABELTAG 121  </span><br><span class="line">  </span><br><span class="line">@implementation PieView  </span><br><span class="line">  </span><br><span class="line">- (id)initWithFrame:(CGRect)frame  </span><br><span class="line">&#123;  </span><br><span class="line">    self = [super initWithFrame:frame];  </span><br><span class="line">    if (self) &#123;  </span><br><span class="line">        self.frame = frame;  </span><br><span class="line">        self.backgroundColor = [UIColor orangeColor];  </span><br><span class="line">        [self initArr];  </span><br><span class="line">        [self initSubviews];  </span><br><span class="line">    &#125;  </span><br><span class="line">    return self;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">- (void)initSubviews &#123;  </span><br><span class="line">      </span><br><span class="line">    NSArray *titleArr = @[@&quot;现金类&quot;,@&quot;固定收益类&quot;,@&quot;股票类&quot;];  </span><br><span class="line">    NSArray *subTitleArr = @[@&quot;30%&quot;,@&quot;60%&quot;,@&quot;10%&quot;];  </span><br><span class="line">      </span><br><span class="line">    for (int i = 0; i &lt; self.percentArr.count; i++) &#123;  </span><br><span class="line">        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-100, -100, 100, 100)];  </span><br><span class="line">        label.font = [UIFont systemFontOfSize:16];  </span><br><span class="line">        label.text = [NSString stringWithFormat:@&quot;%@\n%@&quot;,titleArr[i],subTitleArr[i]];  </span><br><span class="line">        label.textColor = [UIColor whiteColor];  </span><br><span class="line">        label.textAlignment = NSTextAlignmentCenter;  </span><br><span class="line">        label.numberOfLines = 0;  </span><br><span class="line">        label.lineBreakMode = NSLineBreakByCharWrapping;  </span><br><span class="line">        label.tag = LABELTAG+i;  </span><br><span class="line">        [self addSubview:label];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">- (void)initArr &#123;  </span><br><span class="line">    self.percentArr = @[@0.3,@0.6,@0.1];  </span><br><span class="line">    self.angleArr = [[NSMutableArray alloc] initWithCapacity:self.percentArr.count];  </span><br><span class="line">    self.midAngleArr = [[NSMutableArray alloc] initWithCapacity:self.percentArr.count];  </span><br><span class="line">    float sumAngle = 0.0; </span><br><span class="line">//通过百分比转换成弧度  </span><br><span class="line">    for (int i = 0; i &lt; self.percentArr.count; i++) &#123;  </span><br><span class="line">        CGFloat angle = [self.percentArr[i] floatValue]*2*M_PI;  </span><br><span class="line">        CGFloat midAngle = sumAngle + angle/2.0;  </span><br><span class="line">        [self.midAngleArr addObject:[NSNumber numberWithFloat:midAngle]];  </span><br><span class="line">        sumAngle += angle;  </span><br><span class="line">        [self.angleArr addObject:[NSNumber numberWithFloat:sumAngle]];  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// Only override drawRect: if you perform custom drawing.  </span><br><span class="line">// An empty implementation adversely affects performance during animation.  </span><br><span class="line">- (void)drawRect:(CGRect)rect &#123;  </span><br><span class="line">    //绘制外圆填充绿色  </span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();  </span><br><span class="line">    CGContextSetFillColorWithColor(context, [UIColor greenColor].CGColor);  </span><br><span class="line">    CGContextAddArc(context, kScreenWidth/2, 150, OUTR, 0, 2*M_PI, 0);  </span><br><span class="line">    CGContextFillPath(context);  </span><br><span class="line">      </span><br><span class="line">    //绘制外圆设置颜色为白色  </span><br><span class="line">    CGContextSetLineWidth(context, 2);  </span><br><span class="line">    CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">    CGContextAddArc(context, PIECENTERX, PIECENTERY, OUTR, 0, 2*M_PI, 0);  </span><br><span class="line">    CGContextStrokePath(context);  </span><br><span class="line">      </span><br><span class="line">    //绘制内圆填充色为橙色  </span><br><span class="line">    CGContextSetFillColorWithColor(context, [UIColor orangeColor].CGColor);  </span><br><span class="line">    CGContextAddArc(context, PIECENTERX, PIECENTERY, INR, 0, 2*M_PI, 0);  </span><br><span class="line">    CGContextFillPath(context);  </span><br><span class="line">      </span><br><span class="line">    //绘制内圆颜色为白色  </span><br><span class="line">    CGContextSetLineWidth(context, 2);  </span><br><span class="line">    CGContextAddArc(context, PIECENTERX, PIECENTERY, INR, 0, 2*M_PI, 0);  </span><br><span class="line">    CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">    CGContextStrokePath(context);  </span><br><span class="line">      </span><br><span class="line">    for (int i = 0; i &lt; self.angleArr.count; i++) &#123;  </span><br><span class="line">          </span><br><span class="line">        //根据弧度算内分割的线的起始点  </span><br><span class="line">        CGFloat angle = [self.angleArr[i] floatValue];  </span><br><span class="line">        CGPoint inPoint = CGPointMake(PIECENTERX+INR*cos(angle), PIECENTERY+INR*sin(angle));  </span><br><span class="line">        CGPoint outPoint = CGPointMake(PIECENTERX+OUTR*cos(angle), PIECENTERY+OUTR*sin(angle));  </span><br><span class="line">          </span><br><span class="line">        //连接起始点  </span><br><span class="line">        CGContextSetLineWidth(context, 2.0);  </span><br><span class="line">        CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">        CGContextMoveToPoint(context, inPoint.x, inPoint.y);  </span><br><span class="line">        CGContextAddLineToPoint(context, outPoint.x, outPoint.y);  </span><br><span class="line">        CGContextStrokePath(context);  </span><br><span class="line">          </span><br><span class="line">        //算每个分段弧度的中心点位置  </span><br><span class="line">        CGFloat midAngel = [self.midAngleArr[i] floatValue];  </span><br><span class="line">        CGPoint midPoint = CGPointMake(PIECENTERX+(INR+OUTR)/2.0*cos(midAngel), PIECENTERY+(INR+OUTR)/2.0*sin(midAngel));  </span><br><span class="line">          </span><br><span class="line">//        CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">//        CGContextAddArc(context, midPoint.x, midPoint.y, 3, 0, 2*M_PI, 0);  </span><br><span class="line">//        CGContextFillPath(context);  </span><br><span class="line">          </span><br><span class="line">        //每个分段延伸出去的折点  </span><br><span class="line">        CGPoint breakPoint = CGPointMake(PIECENTERX+(OUTR+(OUTR-INR)/2.0)*cos(midAngel), PIECENTERY+(OUTR+(OUTR-INR)/2.0)*sin(midAngel));  </span><br><span class="line">//        CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">//        CGContextAddArc(context, breakPoint.x, breakPoint.y, 3, 0, 2*M_PI, 0);  </span><br><span class="line">//        CGContextFillPath(context);  </span><br><span class="line">          </span><br><span class="line">        //结束点的位置，确定说明文本的放置位置  </span><br><span class="line">        CGPoint endPoint;  </span><br><span class="line">        if (breakPoint.x&lt;PIECENTERX) &#123;  </span><br><span class="line">            endPoint = CGPointMake(43, breakPoint.y);  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            endPoint = CGPointMake(kScreenWidth-43, breakPoint.y);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        //结束点画圈，填充白色  </span><br><span class="line">        CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">        CGContextAddArc(context, endPoint.x, endPoint.y, 3, 0, 2*M_PI, 0);  </span><br><span class="line">        CGContextFillPath(context);  </span><br><span class="line">          </span><br><span class="line">        //将中心点、折点、结束点连接起来  </span><br><span class="line">        CGContextSetLineWidth(context, 2.0);  </span><br><span class="line">        CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">        CGContextMoveToPoint(context, midPoint.x, midPoint.y);  </span><br><span class="line">        CGContextAddLineToPoint(context, breakPoint.x, breakPoint.y);  </span><br><span class="line">        CGContextAddLineToPoint(context, endPoint.x, endPoint.y);  </span><br><span class="line">        CGContextSetLineCap(context, kCGLineCapRound);  </span><br><span class="line">        CGContextStrokePath(context);  </span><br><span class="line">          </span><br><span class="line">//        CGContextSetLineWidth(context, 2.0f);  </span><br><span class="line">//        CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor);  </span><br><span class="line">//        CGContextMoveToPoint(context, midPoint.x, midPoint.y);  </span><br><span class="line">//        CGContextSetLineCap(context, kCGLineCapRound);  </span><br><span class="line">//        CGContextAddLineToPoint(context, breakPoint.x, breakPoint.y);  </span><br><span class="line">//        CGContextStrokePath(context);  </span><br><span class="line">          </span><br><span class="line">        //调整说明控件的中心位置  </span><br><span class="line">        UILabel *label = (UILabel *)[self viewWithTag:LABELTAG+i];  </span><br><span class="line">        label.center = CGPointMake(endPoint.x, endPoint.y+30);  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>最终效果图：<br><img src="https://upload-images.jianshu.io/upload_images/3603263-d8c13c03a02f7d91.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150914150016735.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> UI </tag>
            
            <tag> OC </tag>
            
            <tag> 三角函数 </tag>
            
            <tag> 圆 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
